def print_board(board):
    for row in board:
        print("|".join(row))
        print("-----")

def check_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([board[i][j] == player for j in range(3)]) or \
           all([board[j][i] == player for j in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or \
       all([board[i][2-i] == player for i in range(3)]):
        return True
    return False

def is_board_full(board):
    return all([cell != " " for row in board for cell in row])

def get_empty_positions(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]

def player_move(board, player):
    while True:
        try:
            row = int(input("Player {} - Enter row (0, 1, or 2): ".format(player)))
            col = int(input("Player {} - Enter column (0, 1, or 2): ".format(player)))
            if board[row][col] == " ":
                return row, col
            else:
                print("That spot is already taken. Try again.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    current_player = 0

    while True:
        print_board(board)
        print("Player", players[current_player])
        row, col = player_move(board, players[current_player])
        board[row][col] = players[current_player]
        if check_winner(board, players[current_player]):
            print_board(board)
            print("Player", players[current_player], "wins!")
            break
        elif is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break
        current_player = (current_player + 1) % 2

if __name__ == "__main__":
    tic_tac_toe()
